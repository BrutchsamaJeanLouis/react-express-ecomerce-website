#!/usr/bin/env node

// Init Environment variable files
const path = require('path')
const { exit } = require('process')

if (process.env.NODE_ENV) {
  require('dotenv').config({
    path: path.join(__dirname, `../../.env.${process.env.NODE_ENV}`)
  })
  console.log(`Running server on port ${process.env.SERVER_PORT} with environment >> ${process.env.NODE_ENV}`)
} else {
  console.error('No NODE_ENV provided')
  exit()
}

/**
 * Module dependencies.
 */
syncDb()
var app = require('../app')
var debug = require('debug')('server:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.SERVER_PORT)
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function syncDb () {
  // initialize DB & sequelize and sync Model changes
  // TODO PROD-TASK please remove auto sync
  // NOT SAFE for production use migrations instead
  const strategy = 'alter' // options: force dropts tables, alter modify schema
  require('../../models/index').sequelize.sync({ [strategy]: true })
    .then(() => console.log(`successfully ${strategy} DB tables to Models`))
    .catch(err => console.error('DB sync error', err))
}

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
